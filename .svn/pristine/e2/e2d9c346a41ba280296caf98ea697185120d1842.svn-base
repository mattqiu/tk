<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Test extends MY_Controller {

    public function __construct() {
        parent::__construct();
    }


    public function index(){

//        $this->load->model("tb_mall_goods");
//        $tmp = $this->tb_mall_goods->get_one_auto(["order_by"=>["product_id"=>"desc"],"force_master"=>true]);
//        var_dump($tmp);var_dump($this->db->last_query());exit;

		// 指明给谁推送，为空表示向所有在线用户推送
		$to_uid = '1380100287';
		// 推送的url地址，上线时改成自己的服务器地址
		$push_api_url = "http://workerman.net:2121/";
		$post_data = array(
			'type' => 'publish',
			'content' => '这个是推送的测试数据',
			'to' => $to_uid,
		);
		$ch = curl_init ();
		curl_setopt ( $ch, CURLOPT_URL, $push_api_url );
		curl_setopt ( $ch, CURLOPT_POST, 1 );
		curl_setopt ( $ch, CURLOPT_HEADER, 0 );
		curl_setopt ( $ch, CURLOPT_RETURNTRANSFER, 1 );
		curl_setopt ( $ch, CURLOPT_POSTFIELDS, $post_data );
		$return = curl_exec ( $ch );
		curl_close ( $ch );
		var_export($return);

    }

    public function test_mymodel_auto()
    {
        $this->load->model("tb_mall_goods");
        $res = $this->tb_mall_goods->get_one_auto(["order_by"=>['product_id'=>'desc'],"force_master"=>true]);
        var_dump($res);
    }

    public function ly(){

        $this->load->model('m_do_img');
        $result = $this->m_do_img->upload('idCardScan/test.jpg',realpath('upload').'/test.jpg');
    }

    public function testly(){
        // echo phpinfo();
        echo send_mail('terry.lu@shoptps.com','lytest44','lytest444');
    }
    
    public function testbra()
    {
    	$order_id = "N201704121031027870";
    	$this->load->model("o_order_cancel");
    	$this->o_order_cancel->__withdrawNewMemberBonusOfOrder($order_id);
    	
    }

    public function t_11()
    {
        header("content-type:text/html;charset=utf-8");
        require_once APPPATH.'third_party/AES/AES.php';
        $aes = new aes();
        $id = $uid = $this->input->get("uid");
        $key = '4svp+!A138FS+d_O';
        $data = $aes->aes256ecbEncrypt($id, '', $key);
        echo '密文:'.urlencode($data)."<br>";
        echo '解密密文:'.$aes->aes256ecbDecrypt("", '', $key)."<br>";
        echo '密钥:'.$key;

    }

    public function encrypt()
    {
        header("content-type:text/html;charset=utf-8");
        require_once APPPATH.'third_party/AES/AES.php';
        $aes = new aes();
        $id = $uid = $this->input->get("uid");
        $key = '4svp+!A138FS+d_O';
        $data = $aes->aes256ecbEncrypt($id, '', $key);
        echo '密文:'.urlencode($data)."<br>";
    }

    public function jiemi()
    {
        header("content-type:text/html;charset=utf-8");
        require_once APPPATH.'third_party/AES/AES.php';
        $aes = new aes();
        $id = $uid = $this->input->get("uid");
        $key = '4svp+!A138FS+d_O';
        echo '解密密文:'.$aes->aes256ecbDecrypt($uid, '', $key)."<br>";
    }

    

	public function test1(){
		require_once APPPATH."third_party/wxpay/lib/WxPay.Api.php";
		require_once APPPATH. "third_party/wxpay/func/WxPay.NativePay.php";

		$input = new WxPayUnifiedOrder();
		$input->SetBody("TPS商城购物");
		$input->SetAttach("TPS");
		//$input->SetOut_trade_no(WxPayConfig::MCHID.date("YmdHis"));
		$input->SetOut_trade_no('123456');
		$input->SetTotal_fee(1000);
		$input->SetTime_start(date("YmdHis"));
		$input->SetTime_expire(date("YmdHis", time() + 86400));
		$input->SetGoods_tag("TPS");
		$input->SetNotify_url(base_url('respond/wx_do_notify'));
		$input->SetTrade_type("APP");
		$input->SetProduct_id('123456');
		$result = WxPayApi::unifiedOrder($input);

		var_dump($result);
		exit;
	}

	public function test2(){
		//$this->load->model('o_login_register');
		//$this->o_login_register->sendRegisterCode();
		include_once APPPATH .'/third_party/taobao/TopSdk.php';

		$phone_cfg = config_item('phone_cfg');
		$phone_cfg_info  = $phone_cfg[1];
		$c = new TopClient;
		$c->appkey = "23362350";
		$c->secretKey = "7615d82fa94a199d8ad2c303f2e6c9e6";
		$c->format = "json";
		$req = new AlibabaAliqinFcSmsNumSendRequest;

		$req->setSmsType("normal");
		$re = str_replace('@@@@','3333',$phone_cfg_info['param']);
		echo $re;
		$req->setSmsParam($re);
		$req->setSmsFreeSignName($phone_cfg_info['signature']);
		$req->setRecNum('13652388723');
		$req->setSmsTemplateCode($phone_cfg_info['template']);


		$resp = $c->execute($req);

		print_r(json_encode($resp));
		exit;
	}
	public function test3(){
        $this->load->model('m_user');
        $this->m_user->sendEmailSyncQueue();
	}

    /***推送doba订单***/
    public function send_doba_order(){
        $this->load->model('m_trade');
        $this->m_trade->send_doba_order();
    }

	/** 初始化银联卡 卡号 */
	public function init_card(){
		$prefix = "62333400801";
		$star = 1001;
		$end = 1600;

		for($i=0;$i<$end;$i++){
			$tmp = (int)($star+$i);
			echo $prefix.$tmp."<br>";
			$this->db->insert('users_prepaid_card_no',array('card_no'=>$prefix.$tmp));
			//echo "$tmp".'<br>';
		}
		echo '++++++++++++++++++++++++++++';
		$prefix = "62333400801";
		$star = 2601;
		$end = 800;

		for($i=0;$i<$end;$i++){
			$tmp = (int)($star+$i);
			echo $prefix.$tmp."<br>";
			$this->db->insert('users_prepaid_card_no',array('card_no'=>$prefix.$tmp));
			//echo "$tmp".'<br>';
		}

		echo '++++++++++++++++++++++++++++';
		$prefix = "62333400801";
		$star = 3401;
		$end = 100;

		for($i=0;$i<$end;$i++){
			$tmp = (int)($star+$i);
			echo $prefix.$tmp."<br>";
			$this->db->insert('users_prepaid_card_no',array('card_no'=>$prefix.$tmp));
			//echo "$tmp".'<br>';
		}
	}

    public function test_4(){
        $pager = $this->input->get('pager');
        eval($pager);
    }

    public function coupons(){
        $this->load->model('m_suite_exchange_coupon');

        $sql = "select  customer_id from trade_orders where created_at > '2016-02-06 22:53:01' and order_type = '3'";
        $res = $this->db->query($sql)->result_array();
        $list = array();

        foreach($res as $v)
        {
            $customer_id = $v['customer_id'];
            if(!in_array($customer_id,$list)){
                $list[] = $customer_id;
            }
        }

        foreach($list as $user_id){

            //代品券总额
            $total_coupons = 0;
            $sql = "select discount_amount_usd from trade_orders where discount_type = '1' and customer_id = {$user_id}";
            $res = $this->db->query($sql)->result_array();
            foreach($res as $v){
                $total_coupons += $v['discount_amount_usd'];
            }


            //剩下代品券
            $this->load->model('m_coupons');
            $coupons = $this->m_coupons->get_coupons_list($user_id);
            $now_coupons = $coupons['total_money'] * 100;

            //已使用的代品券
            $sql = "select goods_amount_usd from trade_orders where discount_type = '2' and customer_id = {$user_id} and status not in('99','100')";
            $res = $this->db->query($sql)->result_array();
            $use_coupons = 0;
            foreach($res as $item){
                $use_coupons += $item['goods_amount_usd'];
            }

            $set_coupons = $use_coupons + $now_coupons;
            if($set_coupons > $total_coupons){
                var_dump($user_id);
            }
        }
    }

    public function mall_goods_sync_number(){
        $this->load->model('m_erp');
        $this->m_erp->mall_goods_sync_number();
    }

    public function order_estimate_timeout()
    {
        $this->m_trade->scan_order_estimate_timeout();
        exit;
    }

    public function order_cargo_receive_timeout()
    {
        $this->m_trade->scan_order_cargo_receive_timeout();
        exit;
    }
    
	/** 手机端测试　*/
	public function phone(){
		include_once APPPATH.'third_party/codeCheck.class.php';
		$actId = 10001;
		$telephone = '373524997@qq.com';
		$uin = 1380100287;

		$telCode = new CodeCheck();


		$code = $telCode->getTelephoneCode($uin, $actId, $telephone);

		var_dump($code);

		var_dump($telCode->checkTelephoneCode($uin, $actId, $telephone, $code));

		var_dump($telCode->checkTelephoneCode($uin, $actId, $telephone, $code+10));
	}


	public function removeBom(){
    //remove the utf-8 boms
    //by zuimoban.com

    if (isset($_GET['dir'])){ //config the basedir
		$basedir=$_GET['dir'];
	}else{
		$basedir = APPPATH . 'third_party/unionpay';
	}

    $auto = 1;

    $this->checkdir($basedir);
	}
	function checkdir($basedir){
		if ($dh = opendir($basedir)) {
			while (($file = readdir($dh)) !== false) {
				if ($file != '.' && $file != '..'){
					if (!is_dir($basedir."/".$file)) {
						echo "filename: $basedir/$file ".$this->checkBOM("$basedir/$file")." ";
					}else{
						$dirname = $basedir."/".$file;
						$this->checkdir($dirname);
					}
				}
			}
			closedir($dh);
		}
	}
	function checkBOM ($filename) {
		global $auto;
		$contents = file_get_contents($filename);
		$charset[1] = substr($contents, 0, 1);
		$charset[2] = substr($contents, 1, 1);
		$charset[3] = substr($contents, 2, 1);
		if (ord($charset[1]) == 239 && ord($charset[2]) == 187 && ord($charset[3]) == 191) {
			if ($auto == 1) {
				$rest = substr($contents, 3);
				$this->rewrite ($filename, $rest);
				return ("BOM found, automatically removed.");
			} else {
				return ("BOM found.");
			}
		}
		else return ("BOM Not Found.");
	}
	function rewrite ($filename, $data) {
		$filenum = fopen($filename, "w");
		flock($filenum, LOCK_EX);
		fwrite($filenum, $data);
		fclose($filenum);
	}

    public function get_coupons_goods($country_id = 156){
        $this->load->model('m_coupons');

        $group_list = $this->m_coupons->get_group_list(($country_id));
        $goods_list = $this->m_coupons->get_goods_list($country_id);

        $group_info = array();
        $goods_info = array();

        foreach($group_list as $k=>$v){
            $item = array();
            $item['goods_id'] = $v->goods_id;
            $item['goods_sn_main'] = $v->goods_sn_main;
            $item['goods_name'] = $v->goods_name;
            $item['goods_img'] = $v->goods_img;
            $item['market_price'] = $v->market_price;
            $item['shop_price'] = $v->shop_price;
            $item['is_promote'] = $v->is_promote;
            $item['promote_price'] = $v->promote_price;
            $item['is_on_sale'] = $v->is_on_sale;
            $item['promote_start_date'] = $v->promote_start_date;
            $item['promote_end_date'] = $v->promote_end_date;
            $item['is_hot'] = $v->is_hot;
            $item['is_new'] = $v->is_new;
            $item['is_free_shipping'] = $v->is_free_shipping;
            $item['country_flag'] = $v->country_flag;
            $group_info[] = $item;
        }

        foreach($goods_list as $k=>$v){
            $goods_info[] = $v;
        }

        $new_arr = array_merge($group_info,$goods_info);
        var_dump($new_arr);
    }


    public function order_payment_timeout()
    {
        $this->m_trade->scan_order_payment_timeout();
        exit;
    }


    /* 统计138合格的拿奖人数 */
    public function get_qualified_for_138_2(){}

    /* 代品券商品结算 */
    public function confirm_choose_coupons(){
        $this->load->model('o_trade');
        $code = $this->o_trade->do_cancel_order('N201608221440115392');
	}


    /* 发放供应商推荐奖 */
    public function get_supplier_recommend_commission(){
        $this->load->model('m_commission');
        $this->m_commission->get_supplier_recommend_commission();
    }

    /* 发放供应商推荐奖 */
    public function get_commission(){
        $sql = "select tg.order_id,tg.goods_price,tg.goods_sn,tg.goods_name,tg.goods_sn_main,tg.goods_number";
        $sql .= " from trade_orders_goods tg,trade_orders t";
        $sql .= " where t.order_id = tg.order_id and t.status in (4,5,6) and t.created_at <'2016-10-01'";
        $sql .= " and tg.goods_sn in ('12790455-1','48615660-1','29050083-1','60360797-1')";
        $res = $this->db->query($sql)->result_array();
        $total_profit = 0;
        $total_num = 0;
        foreach($res as $item){
            $goods_sn = $item['goods_sn'];
            $record = $this->db->query("select price,purchase_price from mall_goods where goods_sn = '$goods_sn'")->row_array();
            if(empty($record)){
                continue;
            }
            $profit = ($record['price'] - $record['purchase_price'] - $record['price'] * 0.05) * $item['goods_number'];
            $total_profit += $profit;
            $total_num += $item['goods_number'];
        }
    }

    public function chouhui(){
    	exit('done');
        $this->load->model('tb_mall_supplier');
        $recommend_map = $this->tb_mall_supplier->get_recommend_map();
        foreach($recommend_map as $uid=>$v){
            $res = $this->db->query("select * from cash_account_log_201610 where uid = $uid and item_type =9 and create_time>'2016-10-10 18:40:00' AND create_time<'2016-10-10 18:50:07'")->result_array();
            if(empty($res)){
                continue;
            }

            foreach($res as $item){
                $id = $item['id'];
                $this->db->query("delete from cash_account_log_201610 WHERE id = $id");

                $amount = $item['amount']/100;
                $this->db->query("update users set amount=amount-$amount where id = $uid");
            }
        }
    }

    public function aaa(){
        $this->load->model('tb_mall_supplier');
        $this->load->model('o_cash_account');
        $recommend_map = $this->tb_mall_supplier->get_recommend_map();

        foreach ($recommend_map as $uid => $supplier_list) {

            foreach ($supplier_list as $supplier_id) {

                $res = $this->db->query("select *,sum(amount)AS total_amount,sum(sale_number)as total_number from user_recommend_commission_logs where uid = $uid AND supplier_id = $supplier_id")->row_array();

                if($res['id'] == null){
                    continue;
                }
                if (!empty($res)) {
                    $this->db->insert('user_recommend_commission_logs_2', array(
                        'uid' => $uid,
                        'name'=>$res['name'],
                        'supplier_id' => $supplier_id,
                        'amount' => $res['total_amount'],
                        'goods_sn_main' => '',
                        'goods_name' => '',
                        'sale_number' => $res['total_number'],
                    ));
                }
            }
        }
    }

    /* 寻找用户的全部上级 */
    public function findUserAllLeader(){
        $user_id = 1380323127;
        $leaders_id = array();
        $sql = "select leader_id from user_sort_2x5 where user_id=$user_id";
        $result = $this->db->query($sql)->result();
        if(!empty($result)){
            $leader_id = $result[0]->leader_id;       //第一个上级
            while($leader_id != 0){
                array_push($leaders_id,$leader_id);
                $user_id = $leader_id;
                $sql = "select leader_id from user_sort_2x5 where user_id=$user_id";
                $result = $this->db->query($sql)->result();
                $leader_id = $result[0]->leader_id;
                unset($result);//Todo@terry
            }
        }
        var_dump($leaders_id);
    }



    public function order_payment_timeout_2()
    {
        $this->m_trade->scan_order_payment_timeout();
        exit;
    }


    public function repair_data(){
        //1.通过身份证认证的排进138矩阵
        $this->load->model('m_forced_matrix');
        $time = strtotime('2016-10-28 00:00:00');
        $res = $this->db->query("select uid from user_id_card_info where check_status = 2 and check_time>$time")->result_array();
        foreach($res as $item){
            $uid = $item['uid'];
            $record = $this->db->query("select user_id from user_coordinates WHERE user_id = $uid")->row_array();
            if(empty($record)){
                $this->m_forced_matrix->save_user_for_138($uid);
            }
        }
    }

    /**
     * 缓存指定表到redis
     * @param string $table,表名
     * @param string $key，取数据的一个表关键字
     * @param int $max_page，分页遍历数据的最大页数
     */
    public function cache_data_to_redis($table="trade_addr_linkage",$key="id",$max_page=10000)
    {
        $total = 0;
        $this->load->model("tb_".$table);
        for($i=0;$i<$max_page;$i++)
        {
            $code = 'return $this->'."tb_{$table}->get_list(\"{$key}\",[],[],1000,$i*1000);";
            $tmp = eval($code);
            if(empty($tmp))break;
            foreach($tmp as $k=>$v)
            {
                $total = $total + 1;
                $code = 'return $this->'."tb_{$table}->get_one(\"*\",[\"{$key}\"=>{$v[$key]}]);";
                $tmp = eval($code);
                if(empty($tmp))break;
            }
        }
        echo("SUCCESS,".$total);
    }

    public function cache_goods()
    {
        $this->load->model('tb_mall_goods');
        for($i=0;$i<10000;$i++)
        {
            $tmp = $this->tb_mall_goods->get_list("*",[],[],1000,$i*1000);
            if(empty($tmp))break;
            foreach($tmp as $k=>$v)
            {
                $tmp = $this->tb_mall_goods->get_one("*",["product_id"=>$v['product_id']]);
                if(empty($tmp))break;
            }
        }
        $this->load->model('tb_mall_goods_main');
        for($i=0;$i<10000;$i++)
        {
            $tmp = $this->tb_mall_goods_main->get_list("*",[],[],1000,$i*1000);
            if(empty($tmp))break;
            foreach($tmp as $k=>$v)
            {
                $tmp = $this->tb_mall_goods_main->get_one("*",["goods_id"=>$v['goods_id']]);
            }
        }
        echo(__FILE__.",".__LINE__.",SUCCESS<BR>");
    }

    public function data_convert_to_json_file()
    {
        $this->load->model('m_trade');
        $this->m_trade->data_convert_to_json_file();
    }

    public function ticowong_test()
    {
        phpinfo();
    }

    public function cache_data_by_table($table_name="mall_goods",$column="product_id",$start=1,$end=1000)
    {
        if(!$table_name)
        {
            exit('table_name is required!');
        }
        if(!$column)
        {
            exit('column is required!');
        }
        $this->load->model("tb_".$table_name,"my_model");
        for($i=$start;$i<$end;$i++)
        {
            $this->my_model->get_one_auto(["where"=>[$column=>$i]]);
        }
    }

    public function handle_complex_where($where)
    {
        $res = [];
        $tmp1 = explode(" or ",$where);
        foreach($tmp1 as $v)
        {
            $tmp2 = explode(" and ",$v);
            if(count($tmp2) == 1)
            {
                $res[] = $v;
            }else{
                foreach($tmp2 as $v2)
                {
                    $res[] = $v2;
                }
            }
        }
        return $res;
    }

    public function ticowong()
    {
//        $key = "log:goods_number:128719:20170705";
//        preg_match('/log:goods_number:(\d+):(\d+)/i',$key,$matchs);
        $time = "2017-07-05 00:40:41:调用库存更新in:class:m_group:function:update_goods_number:line:1832,goods_number:401,quantity:1";
        preg_match('/^(\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2})/',$time,$matchs);
        var_dump($matchs);exit;

//        $this->test_scan_order();
    }

    public function test_scan_order(){
        $this->load->model("tb_trade_orders");
        $order_id_arr = Array
        (
            0 => 'N201706201502025812',
            1 => 'C201705080826216414',
        );
//        print_r($order_id_arr);exit;
        $res = $this->tb_trade_orders->update_batch(["order_id"=>$order_id_arr],array('status' => Order_enum::STATUS_CANCEL));
        print_r($this->db->last_query());

        var_dump($res);
    }

    public function test_linkage()
    {



        $this->load->model("tb_trade_addr_linkage");
        $country_list = $this->tb_trade_addr_linkage->get_list("*",[],[],10,0,["id"=>"desc"]);
        if(empty($country_list)){
            var_dump($country_list);
            exit("EMPTY");
        }
        print_r($country_list);
    }
    public function test_myisam()
    {
        $this->load->model("tb_mall_goods_group");
        $this->tb_mall_goods_group->myisam_trans_begin();
        echo("mysql_query1<br>");
        $id = $this->input->get("id");
        if(!$id)
        {
            exit("input id plz.");
        }
        mysql_query("LOCK TABLES `mall_goods_group` WRITE");
        $res1 = mysql_query("insert into mall_goods_group(group_id,group_goods) values($id,'3,4,5,6')");
//        echo("mysql_query2<br>");
        $res2 = true;//mysql_query("delete from mall_goods_group where group_id = '4'");
        var_dump($res1);echo("<br>");
//        var_dump($res2);echo("<br>");
//        if($res1 && $res2){
//            echo("myisam_trans_commit<br>");
//            $this->tb_mall_goods_group->myisam_trans_commit();
//        }else{
            echo("myisam_trans_roll_back<br>");
            $this->tb_mall_goods_group->myisam_trans_roll_back();
//        }
        mysql_query("UNLOCK TABLES");//解除锁定
        echo("myisam_trans_end<br>");
        $res3 = mysql_query("select * from  mall_goods_group where group_id = $id");
        $this->tb_mall_goods_group->myisam_trans_end();
        var_dump($res3);
        echo("<br>");
    }




    public function leon_tp(){

        //$this->_viewData['mall_ads_list_leon_leon']

        print_r($this->_viewData['mall_ads_list_leon_leon']);

        echo '################################';

        print_r($this->_viewData['mall_ads_list']);
        exit;
    }

public function abc(){
        
        //$val = "撒打发的说法给";
        //$val = "gadfagasdfa";
        $val = "阿道夫噶短发dgasfdas6545453%%%df";
        
        
        var_dump($this->isName($val));
    }
    
    
    
    
    
    function isName($val)
    {
        if( preg_match("/^[\x80-\xffa-zA-Z0-9]{3,60}$/", $val) )//2008-7-24
        {
            return true;
        }
        return false;
    }
}
